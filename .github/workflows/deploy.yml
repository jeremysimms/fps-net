name: Deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image Name (commit SHA)"
        required: false

concurrency: "production"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: "production"
    env:
      IMAGE_TAG: ${{ github.event.inputs.image_tag || github.sha }}
      SERVICE_NAME: ${{ vars.ECS_SERVICE_NAME }}
      CLUSTER_NAME: ${{ vars.ECS_CLUSTER_NAME }}
      REPO_NAME: ${{ vars.ECR_REPO_NAME }}
      CONTAINER_NAME: ${{ vars.ECR_CONTAINER_NAME }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      TASK_DEFINITION_NAME: ${{ vars.ECS_TASK_DEFINITION_NAME }}
      REGISTRY_URL: ${{ vars.REGISTRY_URL }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          lfs: 'true'
  
      - name: Git LFS Pull
        run: git lfs pull

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push to ECR
        run: |
          docker tag ${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }} ${{ env.REGISTRY_URL }}/${{ env.REPO_NAME }}:latest
          docker tag ${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }} ${{ env.REGISTRY_URL }}/${{ env.REPO_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY_URL }}/${{ env.REPO_NAME }} --all-tags

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_NAME }} --query taskDefinition > task-definition.json

      - name: Remove Extra Config
        run: |
          echo "`jq '.runtimePlatform=null' task-definition.json`" > task-definition.json

      - name: Update Task Definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.REGISTRY_URL }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          force-new-deployment: true